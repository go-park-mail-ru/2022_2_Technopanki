// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6104282cDecodeHeadHunterInternalEntityModels(in *jlexer.Lexer, out *UserFilter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ApplicantName":
			out.ApplicantName = string(in.String())
		case "ApplicantSurname":
			out.ApplicantSurname = string(in.String())
		case "CompanyName":
			out.CompanyName = string(in.String())
		case "Location":
			out.Location = string(in.String())
		case "BusinessType":
			out.BusinessType = string(in.String())
		case "FirstCompanySizeValue":
			out.FirstCompanySizeValue = string(in.String())
		case "SecondCompanySizeValue":
			out.SecondCompanySizeValue = string(in.String())
		case "FirstAgeValue":
			out.FirstAgeValue = string(in.String())
		case "SecondAgeValue":
			out.SecondAgeValue = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6104282cEncodeHeadHunterInternalEntityModels(out *jwriter.Writer, in UserFilter) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ApplicantName\":"
		out.RawString(prefix[1:])
		out.String(string(in.ApplicantName))
	}
	{
		const prefix string = ",\"ApplicantSurname\":"
		out.RawString(prefix)
		out.String(string(in.ApplicantSurname))
	}
	{
		const prefix string = ",\"CompanyName\":"
		out.RawString(prefix)
		out.String(string(in.CompanyName))
	}
	{
		const prefix string = ",\"Location\":"
		out.RawString(prefix)
		out.String(string(in.Location))
	}
	{
		const prefix string = ",\"BusinessType\":"
		out.RawString(prefix)
		out.String(string(in.BusinessType))
	}
	{
		const prefix string = ",\"FirstCompanySizeValue\":"
		out.RawString(prefix)
		out.String(string(in.FirstCompanySizeValue))
	}
	{
		const prefix string = ",\"SecondCompanySizeValue\":"
		out.RawString(prefix)
		out.String(string(in.SecondCompanySizeValue))
	}
	{
		const prefix string = ",\"FirstAgeValue\":"
		out.RawString(prefix)
		out.String(string(in.FirstAgeValue))
	}
	{
		const prefix string = ",\"SecondAgeValue\":"
		out.RawString(prefix)
		out.String(string(in.SecondAgeValue))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserFilter) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6104282cEncodeHeadHunterInternalEntityModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserFilter) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6104282cEncodeHeadHunterInternalEntityModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserFilter) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6104282cDecodeHeadHunterInternalEntityModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserFilter) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6104282cDecodeHeadHunterInternalEntityModels(l, v)
}
func easyjson6104282cDecodeHeadHunterInternalEntityModels1(in *jlexer.Lexer, out *UserAccount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint(in.Uint())
		case "user_type":
			out.UserType = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "contact_number":
			out.ContactNumber = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "image":
			out.Image = string(in.String())
		case "average_color":
			out.AverageColor = string(in.String())
		case "date_of_birth":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateOfBirth).UnmarshalJSON(data))
			}
		case "age":
			out.Age = uint(in.Uint())
		case "created_time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedTime).UnmarshalJSON(data))
			}
		case "applicant_name":
			out.ApplicantName = string(in.String())
		case "applicant_surname":
			out.ApplicantSurname = string(in.String())
		case "applicant_current_salary":
			out.ApplicantCurrentSalary = uint(in.Uint())
		case "company_name":
			out.CompanyName = string(in.String())
		case "business_type":
			out.BusinessType = string(in.String())
		case "company_website_url":
			out.CompanyWebsiteUrl = string(in.String())
		case "location":
			out.Location = string(in.String())
		case "company_size":
			out.CompanySize = uint(in.Uint())
		case "public_fields":
			out.PublicFields = string(in.String())
		case "is_confirmed":
			out.IsConfirmed = bool(in.Bool())
		case "two_factor_sign_in":
			out.TwoFactorSignIn = bool(in.Bool())
		case "mailing_approval":
			out.MailingApproval = bool(in.Bool())
		case "resumes":
			if in.IsNull() {
				in.Skip()
				out.Resumes = nil
			} else {
				in.Delim('[')
				if out.Resumes == nil {
					if !in.IsDelim(']') {
						out.Resumes = make([]Resume, 0, 0)
					} else {
						out.Resumes = []Resume{}
					}
				} else {
					out.Resumes = (out.Resumes)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Resume
					(v1).UnmarshalEasyJSON(in)
					out.Resumes = append(out.Resumes, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "vacancies":
			if in.IsNull() {
				in.Skip()
				out.Vacancies = nil
			} else {
				in.Delim('[')
				if out.Vacancies == nil {
					if !in.IsDelim(']') {
						out.Vacancies = make([]Vacancy, 0, 0)
					} else {
						out.Vacancies = []Vacancy{}
					}
				} else {
					out.Vacancies = (out.Vacancies)[:0]
				}
				for !in.IsDelim(']') {
					var v2 Vacancy
					(v2).UnmarshalEasyJSON(in)
					out.Vacancies = append(out.Vacancies, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "vacancy_activities":
			if in.IsNull() {
				in.Skip()
				out.VacancyActivities = nil
			} else {
				in.Delim('[')
				if out.VacancyActivities == nil {
					if !in.IsDelim(']') {
						out.VacancyActivities = make([]VacancyActivity, 0, 1)
					} else {
						out.VacancyActivities = []VacancyActivity{}
					}
				} else {
					out.VacancyActivities = (out.VacancyActivities)[:0]
				}
				for !in.IsDelim(']') {
					var v3 VacancyActivity
					(v3).UnmarshalEasyJSON(in)
					out.VacancyActivities = append(out.VacancyActivities, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6104282cEncodeHeadHunterInternalEntityModels1(out *jwriter.Writer, in UserAccount) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"user_type\":"
		out.RawString(prefix)
		out.String(string(in.UserType))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"contact_number\":"
		out.RawString(prefix)
		out.String(string(in.ContactNumber))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	{
		const prefix string = ",\"average_color\":"
		out.RawString(prefix)
		out.String(string(in.AverageColor))
	}
	{
		const prefix string = ",\"date_of_birth\":"
		out.RawString(prefix)
		out.Raw((in.DateOfBirth).MarshalJSON())
	}
	if in.Age != 0 {
		const prefix string = ",\"age\":"
		out.RawString(prefix)
		out.Uint(uint(in.Age))
	}
	{
		const prefix string = ",\"created_time\":"
		out.RawString(prefix)
		out.Raw((in.CreatedTime).MarshalJSON())
	}
	if in.ApplicantName != "" {
		const prefix string = ",\"applicant_name\":"
		out.RawString(prefix)
		out.String(string(in.ApplicantName))
	}
	if in.ApplicantSurname != "" {
		const prefix string = ",\"applicant_surname\":"
		out.RawString(prefix)
		out.String(string(in.ApplicantSurname))
	}
	if in.ApplicantCurrentSalary != 0 {
		const prefix string = ",\"applicant_current_salary\":"
		out.RawString(prefix)
		out.Uint(uint(in.ApplicantCurrentSalary))
	}
	if in.CompanyName != "" {
		const prefix string = ",\"company_name\":"
		out.RawString(prefix)
		out.String(string(in.CompanyName))
	}
	if in.BusinessType != "" {
		const prefix string = ",\"business_type\":"
		out.RawString(prefix)
		out.String(string(in.BusinessType))
	}
	if in.CompanyWebsiteUrl != "" {
		const prefix string = ",\"company_website_url\":"
		out.RawString(prefix)
		out.String(string(in.CompanyWebsiteUrl))
	}
	if in.Location != "" {
		const prefix string = ",\"location\":"
		out.RawString(prefix)
		out.String(string(in.Location))
	}
	{
		const prefix string = ",\"company_size\":"
		out.RawString(prefix)
		out.Uint(uint(in.CompanySize))
	}
	{
		const prefix string = ",\"public_fields\":"
		out.RawString(prefix)
		out.String(string(in.PublicFields))
	}
	{
		const prefix string = ",\"is_confirmed\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsConfirmed))
	}
	{
		const prefix string = ",\"two_factor_sign_in\":"
		out.RawString(prefix)
		out.Bool(bool(in.TwoFactorSignIn))
	}
	{
		const prefix string = ",\"mailing_approval\":"
		out.RawString(prefix)
		out.Bool(bool(in.MailingApproval))
	}
	{
		const prefix string = ",\"resumes\":"
		out.RawString(prefix)
		if in.Resumes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v4, v5 := range in.Resumes {
				if v4 > 0 {
					out.RawByte(',')
				}
				(v5).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"vacancies\":"
		out.RawString(prefix)
		if in.Vacancies == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Vacancies {
				if v6 > 0 {
					out.RawByte(',')
				}
				(v7).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"vacancy_activities\":"
		out.RawString(prefix)
		if in.VacancyActivities == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.VacancyActivities {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserAccount) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6104282cEncodeHeadHunterInternalEntityModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserAccount) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6104282cEncodeHeadHunterInternalEntityModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserAccount) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6104282cDecodeHeadHunterInternalEntityModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserAccount) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6104282cDecodeHeadHunterInternalEntityModels1(l, v)
}
func easyjson6104282cDecodeHeadHunterInternalEntityModels2(in *jlexer.Lexer, out *GetAllUsersResponcePointer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]*UserAccount, 0, 8)
					} else {
						out.Data = []*UserAccount{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v10 *UserAccount
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						if v10 == nil {
							v10 = new(UserAccount)
						}
						(*v10).UnmarshalEasyJSON(in)
					}
					out.Data = append(out.Data, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6104282cEncodeHeadHunterInternalEntityModels2(out *jwriter.Writer, in GetAllUsersResponcePointer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Data {
				if v11 > 0 {
					out.RawByte(',')
				}
				if v12 == nil {
					out.RawString("null")
				} else {
					(*v12).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetAllUsersResponcePointer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6104282cEncodeHeadHunterInternalEntityModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetAllUsersResponcePointer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6104282cEncodeHeadHunterInternalEntityModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetAllUsersResponcePointer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6104282cDecodeHeadHunterInternalEntityModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetAllUsersResponcePointer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6104282cDecodeHeadHunterInternalEntityModels2(l, v)
}
func easyjson6104282cDecodeHeadHunterInternalEntityModels3(in *jlexer.Lexer, out *ApplicantPreview) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint(in.Uint())
		case "image":
			out.Image = string(in.String())
		case "applicant_name":
			out.ApplicantName = string(in.String())
		case "applicant_surname":
			out.ApplicantSurname = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "location":
			out.Location = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6104282cEncodeHeadHunterInternalEntityModels3(out *jwriter.Writer, in ApplicantPreview) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	{
		const prefix string = ",\"applicant_name\":"
		out.RawString(prefix)
		out.String(string(in.ApplicantName))
	}
	{
		const prefix string = ",\"applicant_surname\":"
		out.RawString(prefix)
		out.String(string(in.ApplicantSurname))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"location\":"
		out.RawString(prefix)
		out.String(string(in.Location))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApplicantPreview) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6104282cEncodeHeadHunterInternalEntityModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApplicantPreview) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6104282cEncodeHeadHunterInternalEntityModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApplicantPreview) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6104282cDecodeHeadHunterInternalEntityModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApplicantPreview) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6104282cDecodeHeadHunterInternalEntityModels3(l, v)
}

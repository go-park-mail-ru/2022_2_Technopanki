// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson80a4d695DecodeHeadHunterInternalEntityModels(in *jlexer.Lexer, out *VacancyPreviews) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(VacancyPreviews, 0, 8)
			} else {
				*out = VacancyPreviews{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 *VacancyPreview
			if in.IsNull() {
				in.Skip()
				v1 = nil
			} else {
				if v1 == nil {
					v1 = new(VacancyPreview)
				}
				(*v1).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson80a4d695EncodeHeadHunterInternalEntityModels(out *jwriter.Writer, in VacancyPreviews) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			if v3 == nil {
				out.RawString("null")
			} else {
				(*v3).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v VacancyPreviews) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson80a4d695EncodeHeadHunterInternalEntityModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VacancyPreviews) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson80a4d695EncodeHeadHunterInternalEntityModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VacancyPreviews) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson80a4d695DecodeHeadHunterInternalEntityModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VacancyPreviews) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson80a4d695DecodeHeadHunterInternalEntityModels(l, v)
}
func easyjson80a4d695DecodeHeadHunterInternalEntityModels1(in *jlexer.Lexer, out *VacancyPreview) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = uint(in.Uint())
		case "title":
			out.Title = string(in.String())
		case "image":
			out.Image = string(in.String())
		case "salary":
			out.Salary = uint(in.Uint())
		case "location":
			out.Location = string(in.String())
		case "format":
			out.Format = string(in.String())
		case "hours":
			out.Hours = string(in.String())
		case "description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson80a4d695EncodeHeadHunterInternalEntityModels1(out *jwriter.Writer, in VacancyPreview) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.Id))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	{
		const prefix string = ",\"salary\":"
		out.RawString(prefix)
		out.Uint(uint(in.Salary))
	}
	{
		const prefix string = ",\"location\":"
		out.RawString(prefix)
		out.String(string(in.Location))
	}
	{
		const prefix string = ",\"format\":"
		out.RawString(prefix)
		out.String(string(in.Format))
	}
	{
		const prefix string = ",\"hours\":"
		out.RawString(prefix)
		out.String(string(in.Hours))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VacancyPreview) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson80a4d695EncodeHeadHunterInternalEntityModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VacancyPreview) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson80a4d695EncodeHeadHunterInternalEntityModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VacancyPreview) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson80a4d695DecodeHeadHunterInternalEntityModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VacancyPreview) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson80a4d695DecodeHeadHunterInternalEntityModels1(l, v)
}
func easyjson80a4d695DecodeHeadHunterInternalEntityModels2(in *jlexer.Lexer, out *VacancyFilter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Title":
			out.Title = string(in.String())
		case "Location":
			out.Location = string(in.String())
		case "Format":
			out.Format = string(in.String())
		case "Experience":
			out.Experience = string(in.String())
		case "FirstSalaryValue":
			out.FirstSalaryValue = string(in.String())
		case "SecondSalaryValue":
			out.SecondSalaryValue = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson80a4d695EncodeHeadHunterInternalEntityModels2(out *jwriter.Writer, in VacancyFilter) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"Location\":"
		out.RawString(prefix)
		out.String(string(in.Location))
	}
	{
		const prefix string = ",\"Format\":"
		out.RawString(prefix)
		out.String(string(in.Format))
	}
	{
		const prefix string = ",\"Experience\":"
		out.RawString(prefix)
		out.String(string(in.Experience))
	}
	{
		const prefix string = ",\"FirstSalaryValue\":"
		out.RawString(prefix)
		out.String(string(in.FirstSalaryValue))
	}
	{
		const prefix string = ",\"SecondSalaryValue\":"
		out.RawString(prefix)
		out.String(string(in.SecondSalaryValue))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VacancyFilter) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson80a4d695EncodeHeadHunterInternalEntityModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VacancyFilter) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson80a4d695EncodeHeadHunterInternalEntityModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VacancyFilter) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson80a4d695DecodeHeadHunterInternalEntityModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VacancyFilter) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson80a4d695DecodeHeadHunterInternalEntityModels2(l, v)
}
func easyjson80a4d695DecodeHeadHunterInternalEntityModels3(in *jlexer.Lexer, out *Vacancy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint(in.Uint())
		case "postedByUserId":
			out.PostedByUserId = uint(in.Uint())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "tasks":
			out.Tasks = string(in.String())
		case "requirements":
			out.Requirements = string(in.String())
		case "extra":
			out.Extra = string(in.String())
		case "createdDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedDate).UnmarshalJSON(data))
			}
		case "salary":
			out.Salary = uint(in.Uint())
		case "location":
			out.Location = string(in.String())
		case "isActive":
			out.IsActive = bool(in.Bool())
		case "experience":
			out.Experience = string(in.String())
		case "format":
			out.Format = string(in.String())
		case "hours":
			out.Hours = string(in.String())
		case "image":
			out.Image = string(in.String())
		case "vacancyActivities":
			if in.IsNull() {
				in.Skip()
				out.VacancyActivities = nil
			} else {
				in.Delim('[')
				if out.VacancyActivities == nil {
					if !in.IsDelim(']') {
						out.VacancyActivities = make([]VacancyActivity, 0, 1)
					} else {
						out.VacancyActivities = []VacancyActivity{}
					}
				} else {
					out.VacancyActivities = (out.VacancyActivities)[:0]
				}
				for !in.IsDelim(']') {
					var v4 VacancyActivity
					(v4).UnmarshalEasyJSON(in)
					out.VacancyActivities = append(out.VacancyActivities, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "skills":
			if in.IsNull() {
				in.Skip()
				out.Skills = nil
			} else {
				in.Delim('[')
				if out.Skills == nil {
					if !in.IsDelim(']') {
						out.Skills = make([]Skill, 0, 2)
					} else {
						out.Skills = []Skill{}
					}
				} else {
					out.Skills = (out.Skills)[:0]
				}
				for !in.IsDelim(']') {
					var v5 Skill
					(v5).UnmarshalEasyJSON(in)
					out.Skills = append(out.Skills, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson80a4d695EncodeHeadHunterInternalEntityModels3(out *jwriter.Writer, in Vacancy) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"postedByUserId\":"
		out.RawString(prefix)
		out.Uint(uint(in.PostedByUserId))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	if in.Tasks != "" {
		const prefix string = ",\"tasks\":"
		out.RawString(prefix)
		out.String(string(in.Tasks))
	}
	if in.Requirements != "" {
		const prefix string = ",\"requirements\":"
		out.RawString(prefix)
		out.String(string(in.Requirements))
	}
	if in.Extra != "" {
		const prefix string = ",\"extra\":"
		out.RawString(prefix)
		out.String(string(in.Extra))
	}
	{
		const prefix string = ",\"createdDate\":"
		out.RawString(prefix)
		out.Raw((in.CreatedDate).MarshalJSON())
	}
	if in.Salary != 0 {
		const prefix string = ",\"salary\":"
		out.RawString(prefix)
		out.Uint(uint(in.Salary))
	}
	if in.Location != "" {
		const prefix string = ",\"location\":"
		out.RawString(prefix)
		out.String(string(in.Location))
	}
	if in.IsActive {
		const prefix string = ",\"isActive\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsActive))
	}
	if in.Experience != "" {
		const prefix string = ",\"experience\":"
		out.RawString(prefix)
		out.String(string(in.Experience))
	}
	if in.Format != "" {
		const prefix string = ",\"format\":"
		out.RawString(prefix)
		out.String(string(in.Format))
	}
	if in.Hours != "" {
		const prefix string = ",\"hours\":"
		out.RawString(prefix)
		out.String(string(in.Hours))
	}
	if in.Image != "" {
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	{
		const prefix string = ",\"vacancyActivities\":"
		out.RawString(prefix)
		if in.VacancyActivities == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.VacancyActivities {
				if v6 > 0 {
					out.RawByte(',')
				}
				(v7).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"skills\":"
		out.RawString(prefix)
		if in.Skills == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Skills {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Vacancy) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson80a4d695EncodeHeadHunterInternalEntityModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Vacancy) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson80a4d695EncodeHeadHunterInternalEntityModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Vacancy) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson80a4d695DecodeHeadHunterInternalEntityModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Vacancy) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson80a4d695DecodeHeadHunterInternalEntityModels3(l, v)
}
func easyjson80a4d695DecodeHeadHunterInternalEntityModels4(in *jlexer.Lexer, out *GetAllVacanciesResponcePointer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]*Vacancy, 0, 8)
					} else {
						out.Data = []*Vacancy{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v10 *Vacancy
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						if v10 == nil {
							v10 = new(Vacancy)
						}
						(*v10).UnmarshalEasyJSON(in)
					}
					out.Data = append(out.Data, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson80a4d695EncodeHeadHunterInternalEntityModels4(out *jwriter.Writer, in GetAllVacanciesResponcePointer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Data {
				if v11 > 0 {
					out.RawByte(',')
				}
				if v12 == nil {
					out.RawString("null")
				} else {
					(*v12).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetAllVacanciesResponcePointer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson80a4d695EncodeHeadHunterInternalEntityModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetAllVacanciesResponcePointer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson80a4d695EncodeHeadHunterInternalEntityModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetAllVacanciesResponcePointer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson80a4d695DecodeHeadHunterInternalEntityModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetAllVacanciesResponcePointer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson80a4d695DecodeHeadHunterInternalEntityModels4(l, v)
}

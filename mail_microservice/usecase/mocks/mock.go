// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	models "HeadHunter/internal/entity/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMail is a mock of Mail interface.
type MockMail struct {
	ctrl     *gomock.Controller
	recorder *MockMailMockRecorder
}

// MockMailMockRecorder is the mock recorder for MockMail.
type MockMailMockRecorder struct {
	mock *MockMail
}

// NewMockMail creates a new mock instance.
func NewMockMail(ctrl *gomock.Controller) *MockMail {
	mock := &MockMail{ctrl: ctrl}
	mock.recorder = &MockMailMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMail) EXPECT() *MockMailMockRecorder {
	return m.recorder
}

// SendApplicantMailing mocks base method.
func (m *MockMail) SendApplicantMailing(emails []string, vacancies []*models.VacancyPreview) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendApplicantMailing", emails, vacancies)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendApplicantMailing indicates an expected call of SendApplicantMailing.
func (mr *MockMailMockRecorder) SendApplicantMailing(emails, vacancies interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendApplicantMailing", reflect.TypeOf((*MockMail)(nil).SendApplicantMailing), emails, vacancies)
}

// SendConfirmCode mocks base method.
func (m *MockMail) SendConfirmCode(email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendConfirmCode", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendConfirmCode indicates an expected call of SendConfirmCode.
func (mr *MockMailMockRecorder) SendConfirmCode(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendConfirmCode", reflect.TypeOf((*MockMail)(nil).SendConfirmCode), email)
}

// SendEmployerMailing mocks base method.
func (m *MockMail) SendEmployerMailing(emails []string, previews []*models.ResumePreview) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmployerMailing", emails, previews)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmployerMailing indicates an expected call of SendEmployerMailing.
func (mr *MockMailMockRecorder) SendEmployerMailing(emails, applicants interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmployerMailing", reflect.TypeOf((*MockMail)(nil).SendEmployerMailing), emails, applicants)
}

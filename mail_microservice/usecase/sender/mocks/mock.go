// Code generated by MockGen. DO NOT EDIT.
// Source: sender.go

// Package mock_sender is a generated GoMock package.
package mock_sender

import (
	models "HeadHunter/internal/entity/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSender is a mock of Sender interface.
type MockSender struct {
	ctrl     *gomock.Controller
	recorder *MockSenderMockRecorder
}

// MockSenderMockRecorder is the mock recorder for MockSender.
type MockSenderMockRecorder struct {
	mock *MockSender
}

// NewMockSender creates a new mock instance.
func NewMockSender(ctrl *gomock.Controller) *MockSender {
	mock := &MockSender{ctrl: ctrl}
	mock.recorder = &MockSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSender) EXPECT() *MockSenderMockRecorder {
	return m.recorder
}

// SendApplicantMailing mocks base method.
func (m *MockSender) SendApplicantMailing(email string, vacancies []models.VacancyPreview) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendApplicantMailing", email, vacancies)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendApplicantMailing indicates an expected call of SendApplicantMailing.
func (mr *MockSenderMockRecorder) SendApplicantMailing(email, vacancies interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendApplicantMailing", reflect.TypeOf((*MockSender)(nil).SendApplicantMailing), email, vacancies)
}

// SendConfirmCode mocks base method.
func (m *MockSender) SendConfirmCode(email, code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendConfirmCode", email, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendConfirmCode indicates an expected call of SendConfirmCode.
func (mr *MockSenderMockRecorder) SendConfirmCode(email, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendConfirmCode", reflect.TypeOf((*MockSender)(nil).SendConfirmCode), email, code)
}

// SendEmployerMailing mocks base method.
func (m *MockSender) SendEmployerMailing(email string, previews []models.ResumePreview) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmployerMailing", email, previews)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmployerMailing indicates an expected call of SendEmployerMailing.
func (mr *MockSenderMockRecorder) SendEmployerMailing(email, applicants interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmployerMailing", reflect.TypeOf((*MockSender)(nil).SendEmployerMailing), email, applicants)
}

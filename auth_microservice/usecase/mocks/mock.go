// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateConfirmationCode mocks base method.
func (m *MockRepository) CreateConfirmationCode(email string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfirmationCode", email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfirmationCode indicates an expected call of CreateConfirmationCode.
func (mr *MockRepositoryMockRecorder) CreateConfirmationCode(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfirmationCode", reflect.TypeOf((*MockRepository)(nil).CreateConfirmationCode), email)
}

// DeleteSession mocks base method.
func (m *MockRepository) DeleteSession(token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", token)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockRepositoryMockRecorder) DeleteSession(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockRepository)(nil).DeleteSession), token)
}

// GetCodeFromEmail mocks base method.
func (m *MockRepository) GetCodeFromEmail(email string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeFromEmail", email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCodeFromEmail indicates an expected call of GetCodeFromEmail.
func (mr *MockRepositoryMockRecorder) GetCodeFromEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeFromEmail", reflect.TypeOf((*MockRepository)(nil).GetCodeFromEmail), email)
}

// GetSession mocks base method.
func (m *MockRepository) GetSession(token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockRepositoryMockRecorder) GetSession(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockRepository)(nil).GetSession), token)
}

// NewSession mocks base method.
func (m *MockRepository) NewSession(email string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSession", email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewSession indicates an expected call of NewSession.
func (mr *MockRepositoryMockRecorder) NewSession(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSession", reflect.TypeOf((*MockRepository)(nil).NewSession), email)
}
